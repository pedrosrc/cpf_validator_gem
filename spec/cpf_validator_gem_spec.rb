# spec/cpf_validator_gem_spec.rb
require 'cpf_validator_gem'
require 'json'

RSpec.describe CpfValidatorGem do
  describe ".validate" do
    context "com CPF v√°lido" do
      it "retorna status true e mensagem de sucesso" do
        cpf = "111.444.777-35"
        result = JSON.parse(CpfValidatorGem.valid?(cpf))

        expect(result["status"]).to eq(true)
        expect(result["message"]).to eq("üü¢ O CPF 11144477735 informado √© v√°lido.")
      end
    end

    context "com CPF inv√°lido" do
      it "retorna status false e mensagem de erro para CPF com d√≠gitos inv√°lidos" do
        cpf = "123.456.789-00"
        result = JSON.parse(CpfValidatorGem.valid?(cpf))

        expect(result["status"]).to eq(false)
        expect(result["message"]).to eq("üî¥ O CPF 12345678900 informado √© inv√°lido.")
      end

      it "retorna status false para CPF com todos os d√≠gitos iguais" do
        cpf = "111.111.111-11"
        result = JSON.parse(CpfValidatorGem.valid?(cpf))

        expect(result["status"]).to eq(false)
        expect(result["message"]).to eq("üî¥ O CPF 11111111111 informado √© inv√°lido.")
      end

      it "retorna status false para CPF com menos de 11 d√≠gitos" do
        cpf = "123.456.789"
        result = JSON.parse(CpfValidatorGem.valid?(cpf))

        expect(result["status"]).to eq(false)
        expect(result["message"]).to eq("üî¥ O CPF 123456789 informado √© inv√°lido.")
      end
    end
  end
end
